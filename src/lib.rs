#![feature(try_from)]
#![allow(non_camel_case_types)]

#[macro_use]
extern crate diesel; // for the schema.rs auto generated by diesel

pub mod prelude {
    pub use std::{
        fmt,
        str::FromStr,
        marker::Sized,
        fs::{self, OpenOptions},
        convert::{TryFrom, TryInto},
        thread::{spawn, sleep, JoinHandle},
    };

    pub use log::*;
    pub use toml::Value as Env;
    pub use failure::{
        bail,
        ensure,
        err_msg,
        Error,
        Fallible
    };

    pub use serde::Deserialize;
    pub use regex::Regex;
    pub use chrono::{
        DateTime,
        FixedOffset,
        Duration,
        NaiveTime,
    };
    pub use reqwest::{
        Url,
        Client,
        Response,
    };

    pub use crate::{
        db::{
            pin,
            paper,
            SqlConn,
        },
        arxiv_api::{
            Index,
            Subject,
            MetaData,
            fetch::{
                Rss,
                PaperList,
            }
        },
        zhihu_api::{
            List,
            ContentList,
            ClientExt,
            pin::Pin,
        },
        publisher::Publisher,
    };

    pub mod init {
        pub use crate::db::init as db;
        pub use crate::log::init as log;
        pub use crate::timer::init as timer;
        pub use crate::scraper::init as scraper;
        pub use crate::publisher::init as pub_;
    }

    pub fn check_status_code(resp: &mut Response) -> Fallible<()> {
        ensure!(
        !(resp.status().is_client_error() || resp.status().is_server_error()),
        "HTTP request failed, status code = {}, response body = {}.",
        resp.status().as_u16(),
        resp.text()?
    );
        Ok(())
    }

    // TODO: use try_fold to instead for loop or panic in closure
    pub fn try_fold_helper<T, E>(mut acc: Vec<T>, val: Result<T, E>) -> Result<Vec<T>, E>
        where
            T: fmt::Debug,
            E: fmt::Debug,
    {
        if let Ok(val) = val {
            acc.push(val);
            Ok(acc)
        } else {
            Err(val.unwrap_err()) // safely unwrap
        }
    }
}

mod log;
mod timer;
mod scraper;
mod publisher;

mod db;
mod schema;

mod arxiv_api;
mod zhihu_api;
